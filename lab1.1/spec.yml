# SI413 Lab 1.1: Spec for Just Strings language

your_name: GEORGE PRIELIPP
your_alpha: 265112 
used_ai: N # remember to turn in an aichat.md file as well


# Task 1

language_name: mashup 

# Task 2

example_program: |
    # below are example things that are valid in this language - not part of the example programs
     'simple literal';
     "another literal";
     '\'this is how to use the same string character\'';
     "\"same as above\"";
     '"even easier option"';
     "'or like this'";
     ''; # empty literal
     ""; # empty literal
     ["This is a type of string literal"];
     ['This is another way to do a string literal'];
     ['This string' + ' is ' + ' concatenated.'];
     ["Double" + " qoutes" + " work too"];
     [r'Reversed string'];
     [r"Reversed with double qoutes"];
     [r'hello' + " world" + ' mix-matched qouted additions'];
     ['This is a prompt: ']; [?];
     ["Double qoute prompt: "]; [?];
     [r'Reversed prompt']; [?];
     [rr"Double reversed"]; [?];
     #
    # Single line comments are possible if the ending tag is on the same line #

    # example program 1 (for input 1) #
    ['Enter a string:'];
    [?];

    # Yes, I do want two different example programs. #

    # example program 2 (for input 2) #
    ['Enter a string to be reversed:'];
    [r?];

example_input_1: |
    program: Enter a string:
    user: Hello World!

example_output_1: |
    program: Hello World! 

example_input_2: |
    program: Enter a string to be reversed:
    user: Reverse me.

example_output_2: |
    program: .em esreveR


# Task 3

language_syntax: |
    PROGRAM --> PROGRAM EXPRESSION | epsilon
    EXPRESSION --> PRINT; | STATEMENT; | COMMENT
    STATEMENT --> STRING
    STRING --> STRING + STRING | (STRING) | rSTRING | STRING_LITERAL | INPUT
    STRING_LITERAL --> "CHARACTER*" | 'CHARACTER*'
    CHARACTER --> [:ascii:] | \' | \"
    INPUT --> ?
    PRINT --> [STATEMENT]
    COMMENT --> #[:ascii:]*#
    

language_semantics: |
  - A PROGRAM consists of a collection of EXPRESSIONs or is a blank file (denoted by epsilon).
  - Whitespace is skipped when parsing unless it is part of a STRING_LITERAL.
  - Any behavior that is not clearly defined in the syntax should result in a SyntaxError.
  - A STRING_LITERAL is 0 or more CHARACTERs trapped inside qoutes
  - Any character is available to use in a STRING_LITERAL so long as it does not end the STRING_LITERAL and cause a SyntaxError. Should the character abruptly end a STRING_LITERAL, it shall be escaped with a backslash.
  - All EXPRESSIONs end with a semi-colon, or are a COMMENT.
  - Everything evaluates to a STRING except COMMENT.
    * REVERSED_STRING takes the STRING and mirrors the string over its midpoint. 
    * PRINT evaluates to the STRING that was passed in.
    * INPUT evaluates to the user input during runtime.
  - Single line comments have one pound sign before any ASCII characters
  - Concatenation is evaluated from left to right
  - I am leaving PRINT defined how it is so STATEMENT can be extended to include other data types (ie INTEGER, FLOAT, OBJECT, VARIABLE)

# Task 4

reviewer_for: Nate Schmidt

reviewed_by: Nate Schmidt

review_passed: Y

reviewer_comments: <
   This language is easy to understand and the syntax is great. The only thing I would possibly change is the example inputs and outputs
   to not have program and user. I got confused originally that they were supposed to be part of the printed functionality of the 
   example programs
